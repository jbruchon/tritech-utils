#!/bin/bash

VER="1.2"
VERDATE="2020-10-27"

# Finds all possible hard drives on the system, provides info on each,
# and prompts which one to use. Aborts if no drives exist or if the
# user selects an invalid drive.

control_c () {
	rm -f $DISKS $TMPFILE
	echo -e "\nAborting due to user termination."
	exit 1
}

trap control_c INT TERM HUP ABRT

DISKS=$(mktemp)
TMPFILE=$(mktemp)

# Verify that a temporary file name was passed to us
if [ "$1" = "" ]
	then echo "${0}: no temporary file name given" ; exit 1
	else if ! echo "$1" | grep -q "/tmp/"
		then echo "${0}: temp file must be in /tmp"; exit 2
	fi
fi

# Allow no-prompt usage
USEDEFAULT=0; test "$2" = "usedefault" && USEDEFAULT=1

# Check to ensure there are possible hard drives at all
# Additionally, determine if we use hdX or sdX drive designations
tail -n +3 /proc/partitions | \
	awk '{ print $3" "$4" " }' | grep -e '[sh]d[a-z] ' -e 'mmcblk[0-9][0-9]* ' -e 'nvme[0-9]n[0-9][0-9]* ' | sort -g > $DISKS
if ! cat $DISKS | grep -q -e '[sh]d[a-z] ' -e 'mmcblk[0-9][0-9]*' -e 'nvme[0-9]n[0-9][0-9]*'
	then echo "No sd, hd, nvme, or mmcblk disk devices were found." ;
	exit 3
fi

# Load RAID slave devices for RAID device exclusion
KILL="$(echo /sys/block/md*/slaves/* | tr ' ' '\n' | grep -v '\*' | \
	sed 's#.*/##g;s/\([hs]d[a-z]\)[0-9]*.*/\1/;s/\(mmcblk[0-9][0-9]*\).*/\1/;s/\(nvme[0-9]*n[0-9][0-9]*\).*/\1/' \
	| sort -g | uniq | tr '\n' ' ')"

# Scan sysfs to determine what disks are removable disks
for X in $(cat $DISKS | awk '{ print $2 }' | tr '\n' " ")
	do REM=$(cat /sys/block/$X/removable | tr -d '\n');
	RAID=0; echo "$KILL" | grep -q "$X" && RAID=1
	readlink /sys/block/$X | grep -q "/usb" && USB=1 || USB=0
	cat $DISKS | sed s/"$X"/"$X $REM $USB $RAID"/g > $TMPFILE ; mv $TMPFILE $DISKS
done

# Try to determine which disk is most likely to be the internal hard drive
PREF=$(cat $DISKS | grep " 0 0 0" | head -n 1 | cut -d" " -f 2)
if [ "$PREF" = "" ]
	then echo "WARNING: No non-USB, non-removable, non-RAID devices found."
	echo "DO NOT trust that the default device chosen for you is correct!"
	PREF=$(cat $DISKS | grep -v " [0-9] [0-9] 1" | tail -n 1 | cut -d" " -f 2)
	test -z "$PREF" && PREF="_NONE_"
	echo "$CYEL$PREF$COFF was chosen as the default out of ALL possible disks."
fi

if [ "$USEDEFAULT" != "1" ]
	then
	tt_fsinfo nopart nosmart
	echo -n "Enter the target device (${PREF}): "
	read DEV
	else unset DEV
fi
# If nothing entered or USEDEFAULT set, use the default choice
test "$DEV" = "" && DEV="$PREF"

rm -f $DISKS $TMPFILE
echo -n "$DEV" > "$1"
