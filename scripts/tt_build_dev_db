#!/bin/bash

VER=0.5.1
VERDATE="2015-03-21"

# Device database version created by this version of driver drop
# Must be a three-digit number
DBVER=005

. tss__common

# Usage: progress_indicate type name
# Types are:
# - Removed
# + Added
# = Unchanged
# % Update display only
PI_DELAY=19
PI_REM=0; PI_ADD=0; PI_UNC=0; PI_DC=0
progress_indicate () {
	if [ $DBG -gt 1 ]
		then
		case $1 in
			-) echo -n "$CCYA$2$COFF " ;;
			+) echo -n "$CGRN$2$COFF " ;;
			=) echo -n "$CBLU$2$COFF " ;;
			%) PI_DC=$PI_DELAY ;;
			*) echo -n "${CRED}...what?$COFF " ;;
		esac
	fi
	if [[ $DBG -le 1 ]]
		then
		case $1 in
#			-) echo -n "${CCYA}-$COFF" ;;
#			+) echo -n "${CGRN}+$COFF" ;;
#			=) echo -n "${CBLU}=$COFF" ;;
			+) PI_ADD=$((PI_ADD + 1)) ;;
			-) PI_REM=$((PI_REM + 1)) ;;
			=) PI_UNC=$((PI_UNC + 1)) ;;
			%) PI_DC=$PI_DELAY ;;
			*) echo -e "\n${CRED}?$COFF\n" ;;
		esac
		PI_DC=$((PI_DC + 1))
		if [ $PI_DC -ge $PI_DELAY ]
			then PI_DC=0
			echo -n  "${CWHT}[ ${CGRN}$PI_ADD to add  "
			echo -n  "${CCYA}$PI_REM to redo  "
			echo -en "${CBLU}$PI_UNC unchanged$CWHT ]$COFF\r"
		fi
	fi
}

echo "Tritech driver device database builder $VER ($VERDATE)"
DBG=0
ERR=0
FORK=0
Q=0

if ! jodyhash -v 2>/dev/null >/dev/null
	then
	echo "Error: the 'jodyhash' utility is required to build databasees."
	exit 1
fi

FDE=0
if echo ',*pnp0c0d' | format_device_entry x y z >/dev/null 2>/dev/null
	then FDE=1
	else echo "Warning: the format_device_entry tool was not found, using slow version"
fi

for X in $@
	do case $X in
		-h|--help)
		echo -e "\nBuilds a device driver database for use with the TSS driver drop tool"
		echo "and other Tritech Service System software."
		echo "The driver store root can be overriden by setting DRVROOT first, as in:"
		echo "DRVROOT=/mnt/sda2/drivers $0"
		echo -e "\nOptions:\n"
		echo "-d     Debugging mode. Outputs extra details."
		echo "-dd    More debugging mode. Like -d with more messages."
		echo "-ddd   Output as much debugging information as possible."
		echo "-l     Local mode. Use the current directory as DRVROOT."
		echo "-q     Quiet mode. Only produces minimal output."
		echo "-x     Delete the entire driver database in DRVROOT and exit."
		echo
		exit 255
		;;
		-d) DBG=1 ;;
		-dd) DBG=2 ;;
		-ddd) DBG=3 ;;
		-l) DRVROOT=.; echo "${CYEL}Performing all work with current directory as root.$COFF" ;;
		-q) Q=1 ;;
		-x) DELDB=1 ;;
	esac
done

test -z "$DRVROOT" && DRVROOT=~tritech/source/drivers
#export DRVROOT=$SOURCE/drivers
test -z "$DRVBASE" && DRVBASE=$(basename $DRVROOT)
test -z "$DBFILE" && DBFILE="$DRVROOT/devicedb.txt"
test ! -z "$DELDB" && echo "${CRED}Deleting database file $CPUR$DBFILE$COFF" && rm -f $DBFILE && exit
test -z "$LOGFILE" && LOGFILE=/tmp/build_devdb_errors.txt

cd "$DRVROOT"
WD="$(pwd)"
WD="$(basename "$WD")"

TF="$(mktemp)"
TF2="$(mktemp)"
TF3="$(mktemp)"
TD="$(mktemp -d)"
export DRVROOT DRVBASE DBFILE LOGFILE TD WD DBG FORK

# Trap CTRL+C
control_c () {
	if [ $FORK -eq 1 ]
		then
		rm -f $TF $TF2 $TF3 $TFPI $TFPI2 $XX
		exit 1
	fi
	echo -e "\nInterrupted, cleaning up."
	wait $(jobs -p)
	/bin/kill $! 2>/dev/null
	sleep 1
	/bin/kill -9 $! 2>/dev/null
	rm -rf $TD $TF $TF2 $TF3 $XX
	exit 1
}
trap control_c INT TERM HUP ABRT

dispatch () {
	test -z "$SUB" && SUB=0
	test -z "$MAXSUB" && MAXSUB=$(grep ^processor /proc/cpuinfo | tail -n 1 | sed 's/.*:\s*//') && MAXSUB=$(expr $MAXSUB \* 2)
	if [ $MAXSUB -gt 1 ]
		then
		while [ $SUB -ge $MAXSUB ]
			do sleep 0.001
			SP=$MAXSUB
			while [ $SP -gt 0 ]
				# If child process terminates, remove it.
			 	do if ! kill -0 ${SUBPID[$SP]} 2>/dev/null
					then
					DEL=$SP
					while [ $DEL -lt $SUB ]
						do
						DEL2=$((DEL + 1))
						SUBPID[$DEL]="${SUBPID[$DEL2]}"
						DEL=$DEL2 
					done
					unset SUBPID[$SUB]
					SUB=$((SUB - 1))
				fi
				SP=$((SP - 1))
			done
		done
		SUB=$((SUB + 1))
		eval "$(echo "$@" | sed 's/(/\\(/g;s/)/\\)/g')" &
		SUBPID[$SUB]=$!
	else eval "$(echo "$@" | sed 's/(/\\(/g;s/)/\\)/g')" &
	wait $(jobs -p)
	fi
}

process_device_entries () {
	if [ "$FDE" != "1" ]
		then
		while read X
			do
			#echo " --- X Raw: $CYEL$X$COFF"
			X="$(echo "$X" | sed 's/.*,[^a-z*]*//;s/,.*//;s/acpi\\/acpi\\dev_/;s/^\*/acpi\\dev_/')"
			#echo " --- X Cook: $CGRN$X$COFF"
			TYPE="$(echo "$X" | sed 's/\\.*//')"
			#echo " --- Type: $CWHT$TYPE$COFF"
			unset VID PID VEN DEV SUBSYS REV FUNC CC CV CD CLASS SC PROT
			case $TYPE in
				usb|hdaudio|pci|acpi)
				for Y in $(echo "$X" | cut -d\\ -f2- | tr \& " " | sed s/ctlr_/ctlr/g)
					do
					Z1=$(echo "$Y" | sed s/_.*//)
					Z2=$(echo "$Y" | sed s/.*_//)
					case $Z1 in
						vid) VID=":vid=$Z2" ;;
						pid) PID=":pid=$Z2" ;;
						ven) VEN=":ven=$Z2" ;;
						dev) DEV=":dev=$Z2" ;;
						subsys) SUBSYS=":subsys=$Z2" ;;
						rev) REV=":rev=$Z2" ;;
						func) FUNC=":func=$Z2" ;;
						ctlrven) CV=":cv=$Z2" ;;
						ctlrdev) CD=":cd=$Z2" ;;
						class) CLASS=":class=$Z2" ;;
						cc) CC=":cc=$Z2" ;;
						subclass) SC=":sc=$Z2" ;;
						prot) PROT=":prot=$Z2" ;;
					esac
				done
				;;
				*)
				test $DBG -gt 0 && echo "${CYEL}Bad device type: $CCYA$TYPE$COFF"
				unset TYPE
				;;
			esac
			DEVICE="$TYPE$CLASS$SC$PROT$VID$PID$VEN$DEV$SUBSYS$CC$REV$FUNC$CV$CD:win=$2:dv=$3:inf=$4"
			test ! -z "$CLASS$SC$PROT$VID$PID$VEN$DEV$SUBSYS$CC$REV$FUNC$CV$CD" && test ! -z "$TYPE" && echo "$DEVICE" >> $DBFILE2 2>/dev/null
			test $DBG -gt 0 && test "$Q" = "0" && echo "$DEVICE"
		done < "$1"

		else
		cat "$1" | format_device_entry "$2" "$3" "$4" >> $DBFILE2 2>/dev/null
	fi
}

escape_regex () {
        for CHAR in \. \[ \] \^ \$
                do RXS="$(echo "$RXS" | sed "s/\\${CHAR}/\\\\${CHAR}/g")"
        done
        RXS="$(echo "$RXS" | sed 's/\?/\./g')"
        RXS="$(echo "$RXS" | sed 's/\*/\.\*/g')"
}

read_inf_sec () {
	# Cuts out INF section to file $TF2
	# Call format: read_inf_sec "manufacturername" infile outfile
	test -z "$1" && echo "${CRED}read_inf_sec:$COFF No parameter passed, aborting." && exit 1
	: > $3
	read_inf_section "$2" "$1" >> $3 2>/dev/null
}

read_inf_sec_short () {
	# Same as read_inf_sec but only returns the first line of the section
	test -z "$1" && echo "${CRED}read_inf_sec_short:$COFF No parameter passed, aborting." && exit 1
	read_inf_section "$2" "$1" 2>/dev/null | head -n 1 > $3
}

get_manufacturer_names () {
	# Populates an array with manufacturer + decoration section names
	read_inf_sec "manufacturer" $TFPI $TFPI2
	unset MFGNAME
	MFG=0
	while read GMN_LINE
		do
		MFGROOT=$(echo "$GMN_LINE" | sed 's/\s//g;s/[^=]*=//;s/,.*//')
		MFGNAME[$MFG]="$MFGROOT"; (( MFG ++ ))
		for DECOR in $(echo "$GMN_LINE" | sed 's/\s//g;s/[^=]*='"$MFGROOT"'//;s/^,//;s/,/ /g')
			do MFGNAME[$MFG]="${MFGROOT}.$DECOR"; (( MFG ++ ))
		done
	done < $TFPI2
	read_inf_sec "version" $TFPI $TFPI2
	# Extract date code from file
	DV="$(tr -d ' ' < $TFPI2 | grep -m 1 "driverver" | sed 's/.*=//;s/,.*//')"
#	echo "$DV" | grep -q '^./../....' && DV="0$DV"
	[[ "$DV" =~ ^./../.... ]] && DV="0$DV"
#	echo "$DV" | grep -q '^.././....' && DV="$(echo "$DV" | sed s#\(../\)\(./....\)#\10\2#)"
	[[ "$DV" =~ ^.././.... ]] && DV="$(echo "$DV" | sed s#\(../\)\(./....\)#\10\2#)"
	DV="$(echo "$DV" | sed 's#\(..\)/\(..\)/\(....\)#\3\1\2#')"; test -z "$DV" && DV="00000000"
	test $DBG -gt 2 && echo "${CBLU}get_manufacturer_names:$CWHT ($MFG) ${MFGNAME[@]}"
}

clear_winver_flags () {
	IA64=0; W2K=0
	XP32=0; S2K3=0; V32=0; W732=0; W832=0; W8132=0
	XP64=0; S2K364=0; V64=0; W764=0; W864=0; W8164=0
	W1032=0; W1064=0
	IA64X=0; W2KX=0
	XP32X=0; S2K3X=0; V32X=0; W732X=0; W832X=0; W8132X=0
	XP64X=0; S2K364X=0; V64X=0; W764X=0; W864X=0; W8164X=0
	W1032X=0; W1064X=0
}

set_winver_flags () {
	test $DBG -gt 2 && echo "${CBLU}set_winver_flags:$COFF '$1'"
	case "$1" in
		ntia64*) IA64=1 ;;
		ntamd64.10.0) W1064=1 ;;
		ntamd64.10) W1064=1 ;;
		ntamd64.6.3) W8164=1; W1064=1 ;;
		ntamd64.6.2) W864=1; W8164=1; W1064=1 ;;
		ntamd64.6.1) W764=1; W864=1; W8164=1; W1064=1 ;;
		ntamd64.6.0) V64=1; W764=1; W864=1; W8164=1; W1064=1 ;;
		ntamd64.6) V64=1; W764=1; W864=1; W8164=1 W1064=1 ;;
		ntamd64.5.2) S2K364=1; V64=1; W764=1; W864=1; W8164=1; W1064=1 ;;
		ntamd64.5.1) XP64=1; S2K364=1; V64=1; W764=1; W864=1; W8164=1; W1064=1 ;;
		ntamd64.5) XP64=1; S2K364=1; V64=1; W764=1; W864=1; W8164=1; W1064=1 ;;
		ntamd64) XP64=1; S2K364=1; V64=1; W764=1; W864=1; W8164=1; W1064=1 ;;
		ntx86.10.0) W1032=1 ;;
		ntx86.10) W1032=1 ;;
		ntx86.6.3) W8132=1; W1032=1 ;;
		ntx86.6.2) W832=1; W8132=1; W1032=1 ;;
		ntx86.6.1) W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86.6.0) V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86.6) V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86.5.2) S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86.5.1) XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86.5) XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		ntx86) XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.10.0) W1032=1 ;;
		nt.10) W1032=1 ;;
		nt.6.3) W8132=1; W1032=1 ;;
		nt.6.2) W832=1; W8132=1; W1032=1 ;;
		nt.6.1) W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.6.0) V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.6) V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.5.2) S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.5.1) XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt.5) XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		nt) W2K=1; XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
		*) W2K=1; XP32=1; S2K3=1; V32=1; W732=1; W832=1; W8132=1; W1032=1 ;;
	esac
}

unset_winver_flags () {
	test $DBG -gt 2 && echo "${CBLU}unset_winver_flags:$COFF '$1'"
	case "$1" in
		ntia64*) IA64X=1 ;;
		ntamd64.10.0) W1064X=1 ;;
		ntamd64.10) W1064X=1 ;;
		ntamd64.6.3) W8164X=1 ;;
		ntamd64.6.2) W864X=1 ;;
		ntamd64.6.1) W764X=1 ;;
		ntamd64.6.0) V64X=1 ;;
		ntamd64.6) V64X=1; W764X=1; W864X=1; W8164X=1 ;;
		ntamd64.5.2) S2K364X=1 ;;
		ntamd64.5.1) XP64X=1 ;;
		ntamd64.5) XP64X=1; S2K364X=1 ;;
		ntamd64) XP64X=1; S2K364X=1; V64X=1; W764X=1; W864X=1; W8164X=1; W1064X=1 ;;
		ntx86.10.0) W1032X=1 ;;
		ntx86.10) W1032X=1 ;;
		ntx86.6.3) W8132X=1 ;;
		ntx86.6.2) W832X=1 ;;
		ntx86.6.1) W732X=1 ;;
		ntx86.6.0) V32X=1 ;;
		ntx86.6) V32X=1; W732X=1; W832X=1; W8132X=1 ;;
		ntx86.5.2) S2K3X=1 ;;
		ntx86.5.1) XP32X=1 ;;
		ntx86.5) W2KX=1; XP32X=1; S2K3X=1 ;;
		ntx86) W2KX=1; XP32X=1; S2K3X=1; V32X=1; W732X=1; W832X=1; W8132X=1; W1032X=1 ;;
		nt.10.0) W1032X=1 ;;
		nt.10) W1032X=1 ;;
		nt.6.3) W8132X=1 ;;
		nt.6.2) W832X=1 ;;
		nt.6.1) W732X=1 ;;
		nt.6.0) V32X=1 ;;
		nt.6) V32X=1; W732X=1; W832X=1; W8132X=1 ;;
		nt.5.2) S2K3X=1 ;;
		nt.5.1) XP32X=1 ;;
		nt.5) W2KX=1; XP32X=1; S2K3X=1; V32X=1; W732X=1; W832X=1; W8132X=1; W1032X=1 ;;
		nt) W2KX=1 ;;
		*) echo "${CYEL}WARNING:$COFF unrecognized version flag '$CWHT$1$COFF'" ;;
	esac
}

process_winver_flags () {
	for FLG in IA64 W2K XP32 S2K3 V32 W732 W832 W8132 \
		XP64 S2K364 V64 W764 W864 W8164 W1032 W1064
		do
		test "$(eval echo \$${FLG}X)" = "1" && eval $FLG=0
	done
}

sanitize_inf_file () {
	# Strip UTF-16, Windows newlines, normalize case, remove DeviceDesc parts
	# Strip anything after a semicolon (comments) and blank lines
	# We want to minimize the number of lines processed in the main loop.
#	tr -d \\0\\r < "$1" | grep -v '^;' | tr \\011 ' ' | grep -v '^$' | \
#		grep -v '^\s$' | tr '[:upper:]' '[:lower:]' | sed 's/.*devicedesc//g;s/;.*//g' > "$2" \
#		tr '[:upper:]' '[:lower:]' | sed 's/.*devicedesc//g;s/;.*//g' > "$2"
	tr '[:upper:]' '[:lower:]' < "$1" | sed 's/.*devicedesc//g;s/;.*//g' > "$2"
}

clean_out_inf () {
	# Remove all hashes and devices for an INF file in the database
	grep -v "/$1$" $DBFILE | grep -v '^SHA1:' | grep -v "^JH1:$1:" > $TF2 && mv -f $TF2 $DBFILE
}

# Execute this as: function_name file_to_read filename_to_validate
check_inf_not_allowed () {
#	shopt -s nocasematch
	XXX=0; XXY=0
#	echo "$2" | grep -iq '/oemset..\.inf$' || echo "$2" | grep -iq '/autorun.inf$' || echo "$2" | grep -iq '/ntsetup.inf$' || \
	if [[ "$2" =~ /oemset..\.inf$ || "$2" =~ /autorun.inf$ || "$2" =~ /ntsetup.inf$ ]]
		then return 0
		else read_inf_section "$1" version 2>/dev/null | grep -m 1 -iq 'signature.*"\$Windows 95\$"' 2>/dev/null
	fi
#	shopt -u nocasematch
}

add_inf () {
	INF[$INFC]="$1"
	(( INFC ++ ))
	progress_indicate + "$1"
}

process_inf () {
	export FORK=1
	FILE="$@"
	BLACKLIST="$(echo "$@" | sed 's/\.inf$/.dd_bl/;s/\.INF$/.dd_bl/g')"
	TFPI=$(mktemp)
	TFPI2=$(mktemp)
	DBFILE2="$TD/inf_$(basename $TFPI)"
	clear_winver_flags
	sanitize_inf_file "$FILE" "$TFPI"
	get_manufacturer_names $TF

	for SEC in ${MFGNAME[@]}
		do
		test $DBG -gt 1 && echo "$CCYA  --- Reading INF:  $CYEL$FILE:  $CWHT$SEC"
		if read_inf_sec_short "$SEC" $TFPI $TFPI2
			then
			test $DBG -gt 1 && echo -n "${CGRN}INF for $CWHT$FILE$COFF => $CWHT$SEC$COFF: "
			# Test for device entries in a section and set/unset flags as appropriate
			if [ -z "$(cat "$TFPI2")" ]
				then test $DBG -gt 1 && echo "${CYEL}no flags$COFF"
#				echo "$SEC" | grep -iq '\.nt[a-z0-9]*' && unset_winver_flags "$(echo "$SEC" | sed 's/.*\.nt/nt/')"
				[[ "$SEC" =~ \.nt[a-z0-9]* ]] && unset_winver_flags "${SEC/*.nt/nt}"
				else test $DBG -gt 1 && echo "${CGRN}setting flags$COFF"
#				set_winver_flags "$(echo "$SEC" | sed 's/.*\.nt/nt/')"
				set_winver_flags "${SEC/*.nt/nt}"
			fi
			else
			echo "${CYEL}Warning:$COFF read_inf_sec_short failed for $CWHT$FILE$COFF => $CWHT$X$COFF" && ERR=1 && echo "read_inf_sec_short failed for $FILE => $X" >> $LOGFILE
		fi
		: > $TFPI2
	done

	# For each .inf look for a driver drop blacklist (.dd_bl) and process it
	if [ -e "$BLACKLIST" ]
		then
		while read CHANGE
			do
			if [ "$CHANGE" = "-all" ]
				then clear_winver_flags
				else
				NEW_FLAG="$(echo "$CHANGE" | tr -d '\0\r' | sed 's/^[^a-zA-Z0-9]//')"
				OP="$(echo "$CHANGE" | sed 's/^\(...\).*/\1/')"
				case $OP in
					"+nt")
						set_winver_flags "$NEW_FLAG"
						;;
					"-nt")
						unset_winver_flags "$NEW_FLAG"
						;;
					*)
						echo "${CYEL}Warning:$COFF bad operation flag $CCYA$CHANGE$COFF in $BLACKLIST" >&2
						;;
				esac

			fi
		done < "$BLACKLIST"
	fi

	# Build compatibility flag string
	process_winver_flags
	WF="$IA64$W2K$XP32$XP64$S2K3$S2K364$V32$V64$W732$W764$W832$W864$W8132$W8164$W1032$W1064"
	if [ "$WF" = "0000000000000000" ]
		then test "$Q" = "0" && echo "${CYEL}Warning:$CWHT $FILE$COFF has no valid OS flags"
		echo "OS flags bad for $FILE" >> $LOGFILE
	fi
	if [ $DBG -gt 0 ]
		then
		echo -n "IA64=$IA64 W2K=$W2K XP32=$XP32 XP64=$XP64 "
		echo -n "S2K3=$S2K3 S2K364=$S2K364 V32=$V32 V64=$V64 "
		echo -n "W732=$W732 W764=$W764 W832=$W832 W864=$W864 "
		echo    "W8132=$W8132 W8164=$W8164 W1032=$W1032 W1064=$W1064"
	fi

	# Pull out only relevant INF file sections to process, not entire files
	for SEC in ${MFGNAME[@]}
		do if [ "$FDE" != "1" ]
			then read_inf_section "$TFPI" "$SEC" 2>/dev/null | sed 's/\\/\\\\/g' >> $TFPI2
			else read_inf_section "$TFPI" "$SEC" 2>/dev/null >> $TFPI2
		fi
	done

	process_device_entries "$TFPI2"  "$WF" "$DV" "$WD/$FILE"

	# Write jody_hash for integrity checks and clean up
	echo "JH:$FILE:$(jodyhash "$FILE")" >> $DBFILE2
	rm -f $TFPI $TFPI2
}

# Find INF files
INFC=0
IFS0="$IFS"
IFS1=$(echo -en "\n\b")
IFS="$IFS1"

# Load jody_hashes from driver database
CONSISTENT=0
if [ -e "$DBFILE" ]
	then
	if [ "$(grep -m 1 '^tritech_devdb_ver:' $DBFILE | cut -d: -f2)" != "$DBVER" ]
		then echo "$CYEL --- Device DB is being upgraded ---$COFF"
		rm -f "$DBFILE"
		else if grep -q "^CONSISTENT" $DBFILE
			then CONSISTENT=1; echo "$CGRN --- Device DB is consistent ---$COFF"
		fi
	fi
	test "$Q" = "0" && echo -n "Loading INF files: "
fi

# The next step needs a list of INF files; make that list here.
echo -n "Making a list of INF files..."
DEPTH=10
pwd | grep -iq '/windows/inf' && DEPTH=1
find . -maxdepth $DEPTH -name '*.inf' | sed 's#^\./##' > $TF3
find . -maxdepth $DEPTH -name '*.INF' | sed 's#^\./##' >> $TF3
echo "...done: $(wc -l < $TF3) files found."

# If the database exists and is consistent, check for and handle changed files.
if [[ -e "$DBFILE"  && "$CONSISTENT" = "1" ]]
	then grep '^JH:[^:]' $DBFILE > $TF
	for X in $(cut -d: -f2 < $TF)
		do
		if [ ! -e "$X" ]
			then clean_out_inf "$X"
			progress_indicate - "$X"
		fi
	done

	# Read the list of INF files and decide what to do with them
	while read X
		do
		BLACKLIST="$(echo "$X" | sed 's/\.inf$/.dd_bl/;s/\.INF$/.dd_bl/g')"
		HASH=$(grep -m 1 "^JH:$X:" $TF)
		if [[ -z "$HASH" || -e "$BLACKLIST" ]]
			then
			XX=$(mktemp)
			sanitize_inf_file "$X" "$XX"
			if ! check_inf_not_allowed "$XX" "$X"
				then clean_out_inf "$X"
				add_inf "$X"
			fi
			rm -f "$XX"
			else
			HASH2="JH:$X:$(jodyhash "$X")"
			if [ ! "$HASH" = "$HASH2" ]
				then
				XX=$(mktemp)
				sanitize_inf_file "$X" "$XX"
				if ! check_inf_not_allowed "$XX" "$X"
					then clean_out_inf "$X"
					add_inf "$X"
				fi
				rm -f "$XX"
				else
				progress_indicate "=" "$X"
			fi
		fi
	done < $TF3

	# If database missing or inconsistent, toss it and rebuild.
	else
	while read X
		do
		XX=$(mktemp)
		sanitize_inf_file "$X" "$XX"
		check_inf_not_allowed "$XX" "$X" || add_inf "$X"
		rm -f "$XX"
	done < $TF3
fi
progress_indicate % ''
echo
IFS="$IFS0"

if [ "$INFC" = "0" ]
	then test "$Q" = "0" && echo -e "\nNo INF files to process."
	exit
	else echo
	test "$Q" = "0" && echo "Done."
fi

export MFGNAME DBFILE

FILENUM=0
while [ $FILENUM != $INFC ]
	do
	CUR_INF="${INF[FILENUM]}"
	test $DBG -gt 0 && echo
	(( FILENUM ++ ))
	test "$Q" = "0" && echo "$FILENUM/${#INF[@]}:  $CUR_INF"
	test "$Q" = "1" && echo -en "Processed $FILENUM of ${#INF[@]}\r"
	dispatch process_inf "$CUR_INF"
done

wait $(jobs -p)
test "$Q" = "1" && echo

echo "tritech_devdb_ver:$DBVER" > $TF
cat "$DBFILE" $TD/inf_* 2>/dev/null | sort -g | uniq >> $TF && cat $TF > $DBFILE
chmod 644 "$DBFILE"

sleep 1
rm -rf $TF $TF2 $TF3 $TD

if [ "$ERR" = "1" ]
	then
	echo "${CYEL}Warning:$COFF One or more problems occurred during database construction."
	else echo CONSISTENT >> $DBFILE
fi

